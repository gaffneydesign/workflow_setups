/*	 	      file: type-calc.scss	*/ 
// $line-height-in-px: $base-font-size * $line-height;

// Set the Type Size names, assign placement on the scale
$sizeMap: (
     x-small-type: -2,
       small-type: -1,
             base: 	0,
       large-type: 	1, 
     x-large-type: 	2, 
    xx-large-type: 	3, 
     primary-head: 	4
);


@mixin scaler($sizename, $fontbase: $base-font-size) {
	// Requires the Size Name (from sizeMap)
	$scalestep: map-get($sizeMap, $sizename);

	// Calculate the adjustment
	$size-adjustor: power($type-scale, $scalestep);
	$lh-adjustor: power($type-scale, ($scalestep * -1));

	$nrw-size-adjustor: power($nrw-type-scale, $scalestep);
	$nrw-lh-adjustor: power($nrw-type-scale, ($scalestep * -1));


	$calc-fz: 		null;
	$calc-lh: 		null;
	$calc-nrw-fz: 	null;
	$calc-nrw-lh: 	null;

	@if $scalestep == 0 { 		// Essentially, leave the base size alone
		$calc-fz: 		1rem;
		$calc-lh: 		$line-height;		
		$calc-nrw-fz: 	1rem;
		$calc-nrw-lh: 	$nrw-line-height;
	} @else {
		// Scale the font-size based on the Type Scale var and the Font Size number
		$calc-fz: ($size-adjustor * 1rem);

		// Scale the line-height
		// Note: Unitless line-height, as recommended
		// $calc-lh: $line-height/($size-adjustor) + 0.001;	// Hack for Chrome line-height bug	
		$calc-lh: ($line-height * $lh-adjustor) + 0.001;

		// Scale the font-size based on the Type Scale var and the Font Size number
		$calc-nrw-fz: ($nrw-size-adjustor * 1rem);

		// Scale the line-height
		// Note: Unitless line-height, as recommended
		$calc-nrw-lh: $nrw-line-height/($nrw-size-adjustor) + 0.001; // Hack for Chrome line-height bug	
	}

	// Font sizes larger than the base-line-height get a 50% boost on their line-height
	@if $size-adjustor > $line-height {
		$calc-lh: $calc-lh * 1.5;
		$calc-nrw-lh: $calc-nrw-lh * 1.5;
	}

	// Set properties

	@include responsive(sm-up){
		font-size: $calc-fz;
		line-height: $calc-lh;
	};

	@include responsive(xs){
		font-size: $calc-nrw-fz;
		line-height: $calc-nrw-lh;	
	};
}

@mixin set-fa($fa-char: 'f024', $weight: 700) {

	&:before {
		font-family: 'Font Awesome 5 Free';
		content: #{'"\\' + $fa-char + '"'};
		margin-right: 0.35em;
		font-weight: $weight;
		@if $fa-char == 'f024' {
			color: red;
		}
	}
} 

@function beat($beats:4) {
	@return ($line-height/4) * $beats * 1rem;
}

@mixin borderizer($border: 1px, $padding: 2, $whichBd: b) {
	$space: beat($padding);

	@if $whichBd == b {
		padding-bottom: calc(#{$space} - #{$border});
		border-bottom-width: $border;
	} @else if $whichBd == t {
		padding-top: calc(#{$space} - #{$border});
		border-top-width: $border;		
	} @else if $whichBd == 2 {
		padding-top: calc(#{$space} - #{$border});
		padding-bottom: calc(#{$space} - #{$border});
		border-width: $border;		
	} @else {
		@warn $whichBd + ' is not a valid border option. Please enter "b" for bottom, "t" for top, or "2" for both.';		
	}

}

