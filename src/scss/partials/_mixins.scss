@import "variables";
@import "decimal";

@function tint($color, $percentage) {
    @return mix(white, $color, $percentage);
}

@function shade($color, $percentage) {
    @return mix(black, $color, $percentage);
}

@function set-text-color($color) {
  @if lightness($color) > 50 {
    @return $black; // Lighter backgorund, return dark color
  } @else {
    @return $white; // Darker background, return light color
  }
}

$brand: (
  primary: $brand-primary,
  accent:       adjust-hue($brand-primary, 180),
  secondary:    adjust-hue($brand-primary, 120),
  tertiary:     adjust-hue($brand-primary, -120),
  quarternary:  #999 // None in this template
);

@function setColorMap($base) {
  $colorMap: (base: $base);

  $setMap: ();  

  @for $i from 5 through 1 {
    $keyVal: $i * 10;
    $adj: (6 - $i) * 18;
    $setMap: (#{$keyVal}: tint($base, $adj));
    $colorMap: map-merge($colorMap, $setMap);
  }

  @for $i from 1 through 5 {
    $adj: $i * 9;
    $keyVal: ($i + 5) * 10;
    $setMap: (#{$keyVal}: shade($base, $adj));
    $colorMap: map-merge($colorMap, $setMap);
  }

  @return $colorMap;
}

$grayscale:     setColorMap(#999);
$primary:       setColorMap($brand-primary);
$accent:        setColorMap(map-get($brand, 'accent'));
$secondary:     setColorMap(map-get($brand, 'secondary'));
$tertiary:      setColorMap(map-get($brand, 'tertiary'));
$quarternary:   setColorMap(#999);

// Set the Type Size names, assign placement on the scale
$type-map: (
     x-small-type: -2, 
       small-type: -1, 
             base:  0, 
       large-type:  1, 
     x-large-type:  2, 
    xx-large-type:  3, 
     primary-head:  4
);

@function power($exponent, $value, $factor) {
    @if $exponent > 0 {
        @for $i from 1 through $exponent {
            $value: $value * $factor;
        }
    }
    @else if $exponent < 0 {
        @for $i from 1 through -$exponent {
            $value: $value / $factor;
        }
    }

    @return $value;
}

$type-rhythm-px: $base-font-size * $line-height;

@mixin typesetter($size--name) {
    $size--power: map-get($type-map, $size--name);

    // @debug '----' $size--name '----';

    // Calculate the adjustments
    $size-adjustor: power($size--power, 1, $type-scale);
    $height-adjustor: power($size--power * -1, $line-height, $type-scale);
    $nrw-height-adjustor: power($size--power * -1, $nrw-line-height, $nrw-type-scale);

    $fz-pixels: $size-adjustor * $base-font-size;

    @if $fz-pixels > $type-rhythm-px * 0.85 {
        $height-adjustor: $height-adjustor * 1.5;
    }

    @if $fz-pixels < $base-font-size {
        $height-adjustor: $height-adjustor * 0.75;
    }

    $chrome-hack: 0.001;

    font-size: $size-adjustor * 1em;
    line-height: $height-adjustor + $chrome-hack;
}

$nrw-type-rhythm-px: $nrw-font-size * $line-height;

@mixin nrwtypesetter($size--name) {
    $size--power: map-get($type-map, $size--name);

    // @debug '----' $size--name '----';

    // Calculate the adjustments
    $size-adjustor: power($size--power, 1, $nrw-type-scale);
    $height-adjustor: power($size--power * -1, $line-height, $nrw-type-scale);

    $fz-pixels: $size-adjustor * $nrw-font-size;

    @if $fz-pixels > $nrw-type-rhythm-px * 0.85 {
        $height-adjustor: $height-adjustor * 1.5;
    }

    @if $fz-pixels < $nrw-font-size {
        $height-adjustor: $height-adjustor * 0.75;
    }

    $chrome-hack: 0.001;

    font-size: $size-adjustor * 1em;
    line-height: $height-adjustor + $chrome-hack;
}

@function beat($beats: 4) {
    @return $line-height / 4 * $beats * 1rem;
}

// Set FontAwesome
@mixin set-fa($fa-char: "024", $weight: 700) {
    &:before {
        font-family: 'Font Awesome 5 Free';
        content: #{'"\\f' + $fa-char + '"'};
        margin-right: 0.35em;
        font-weight: $weight;

        @if $fa-char == "024" {
            color: red;
        }
    }
}

// Sliders
@mixin slideopen($maxh) {
    max-height: $maxh;
    overflow: visible;
    transition: max-height 0.25s ease-in;
}

@mixin slideclose($maxh) {
    max-height: $maxh;
    overflow: hidden;
    transition: max-height 0.15s ease-out;
}

@mixin clearfix {
    &:after {
        clear: both;
        content: '';
        display: table;
    }
}

@mixin strap-stretch {
    margin-left: $el-pad * -1;
    margin-right: $el-pad * -1;
    padding-left: $el-pad;
    padding-right: $el-pad;
}

//  For development only
@mixin shaded($color: 156, $opacity: 0.5) {
    background-color: rgba($color, $color, $color, $opacity);
}

// Responsive breakpoint generation
@mixin responsive($width) {
    // Only 1200px and larger
    @if $width == lg {
        @media only screen and (min-width: $screen-lg) {
            @content;
        }
    }
    @else if $width == md {
        @media only screen and (max-width: $screen-md-max) {
            @content;
        }
    }
    @else if $width == md-up {
        @media only screen and (min-width: $screen-md) {
            @content;
        }
    }
    @else if $width == md-only {
        @media only screen and (min-width: $screen-md) and (max-width: $screen-md-max) {
            @content;
        }
    }
    @else if $width == sm {
        @media only screen and (max-width: $screen-sm-max) {
            @content;
        }
    }
    @else if $width == sm-up {
        @media only screen and (min-width: $screen-sm) {
            @content;
        }
    }
    @else if $width == sm-only {
        @media only screen and (min-width: $screen-sm) and (max-width: $screen-sm-max) {
            @content;
        }
    }
    @else if $width == xs {
        @media only screen and (max-width: $screen-xs-max) {
            @content;
        }
    }
    @else if $width == xs-up {
        @media only screen and (min-width: $screen-xs) {
            @content;
        }
    }
    @else if $width == xs-only {
        @media only screen and (min-width: $screen-xs) and (max-width: $screen-xs-max) {
            @content;
        }
    }
    @else if $width == xxs {
        @media only screen and (max-width: $screen-xs - 1) {
            @content;
        }
    }
    @else if $width == sm-md {
        @media only screen and (min-width: $screen-sm) and (max-width: $screen-md-max) {
            @content;
        }
    }
    @else if $width == phablet {
        @media only screen and (min-width: $screen-xs) and (max-width: $screen-sm-max) {
            @content;
        }
    }
}