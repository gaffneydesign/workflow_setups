@import 'variables';
@import 'decimal';

// ************
// Color System
// ************
@function tint($color, $percentage) {
  @return mix($white, $color, $percentage);
}

@function shade($color, $percentage) {
  @return mix($black, $color, $percentage);
}

@function set-text-color($color) {
  @if lightness($color) > 50 {
    @return $black; // Lighter backgorund, return dark color
  } @else {
    @return $white; // Darker background, return light color
  }
}

@function fn-set-color-map($base) {

  $color-map: ();
  $set-map: ();

  @for $i from 10 through 1 {
    $key-val: $i * 9;
    $key-val-name: $i * 10;
    $set-map: (l-#{$key-val-name}: tint($base, $key-val));
    $color-map: map-merge($color-map, $set-map);
  }

  $base-map: (base: $base);
  $color-map: map-merge($color-map, $base-map);

  @for $i from 1 through 10 {
    $key-val: $i * 7;
    $key-val-name: $i * 10;
    $set-map: (d-#{$key-val-name}: shade($base, $key-val));
    $color-map: map-merge($color-map, $set-map);
  }

  @return $color-map;
}

$grayscale:     fn-set-color-map(#999);
$primary:       fn-set-color-map($brand-primary);
$accent:        fn-set-color-map(map-get($brand, 'accent'));
$secondary:     fn-set-color-map(map-get($brand, 'secondary'));
$tertiary:      fn-set-color-map(map-get($brand, 'tertiary'));
$quarternary:   fn-set-color-map(#999);

// System States
$info:          fn-set-color-map(map-get($brand, 'info'));
$warning:       fn-set-color-map(map-get($brand, 'warning'));
$danger:        fn-set-color-map(map-get($brand, 'danger'));
$success:       fn-set-color-map(map-get($brand, 'success'));




@mixin apply-colors($component, $color-pattern) {

  @each $color-name, $color-val in $brand {
    #{$component}-#{$color-name} {
      @extend #{'%'}#{$color-name}-#{$color-pattern};
    }
  }
}

@mixin comp-colors-solid($state--color) {
  background-color: map-get($state--color, 'base');
  // border-color: map-get($state--color, 'l-90');
  color: set-text-color(map-get($state--color, 'base'));
}

@mixin comp-colors-outline($state--color) {
  background-color: map-get($state--color, 'l-90');
  border-color: map-get($state--color, 'base');
  color: set-text-color(map-get($state--color, 'l-90'));
}


//  For development only
@mixin shaded($color: 156, $opacity: .5) {
  background-color: rgba($color, $color, $color, $opacity);
}

// Link Colors
$link-color:            map-get($accent, 'd-60');
$link-color-visited:    map-get($accent, 'base');
$link-color-hover:      map-get($accent, 'd-20');
$link-color-active:     map-get($primary, 'd-20');


//   Component Colors
$comp-bg:           map-get($grayscale, 'l-90');
$comp-border:       rgba(0, 0, 0, .25);
$comp-bg-shade:     linear-gradient(to bottom, rgba(0, 0, 0, .065) 0%, rgba(0, 0, 0, .065) 100%);
$comp-border-shade: map-get($grayscale, 'l-50');



// ***********
// Typography
// ***********
@function power($exponent, $value, $factor) {
  @if $exponent == null {
      $value: 1;
  } @else if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $factor;
    }
  } @else if $exponent < 0 {
    @for $i from 1 through -$exponent {
        $value: $value / $factor;
    }
  }

  @return $value;
}


@mixin typesetter($size--name, $screen: '') {
  $size--power: map-get($type-map, $size--name);

  $this-type-scale: $type-scale;
  $this-font-size: $base-font-size;
  $this-type-rhythm-px: $type-rhythm-px;

  @if $screen == 'nrw' {
    $this-type-scale: $nrw-type-scale;
    $this-font-size: $nrw-font-size;
    $this-type-rhythm-px: $nrw-type-rhythm-px;
  }

    // Calculate the adjustments
  $size-adjustor: power($size--power, 1, $this-type-scale);
  $height-adjustor: power($size--power * -1, $line-height, $this-type-scale);

  $fz-pixels: $size-adjustor * $this-font-size;

  @if $fz-pixels > $this-type-rhythm-px * .85 {
    $height-adjustor: $height-adjustor * 1.5;
  }

  @if $fz-pixels < $this-font-size {
    $height-adjustor: $height-adjustor * .75;
  }

  $chrome-hack: .001;

  font-size: $size-adjustor * 1em;
  line-height: $height-adjustor + $chrome-hack;
}

@function beat($beats: 4) {
  @return $line-height / 4 * $beats * 1rem;
}

@mixin underliner($pad: 1, $mar: 0, $col: $comp-border) {
  border-bottom: 1px solid $col;
  padding-top: beat($pad);
  padding-bottom: calc(#{beat($pad)} - 1px);
  margin-bottom: beat($mar);
}

// Set FontAwesome
@mixin set-fa($fa-char: '024', $weight: 700) {
  &::before {
    content: #{''\\f' + $fa-char + '''};
    font-family: 'Font Awesome 5 Free';
    font-weight: $weight;
    margin-right: .35em;

    @if $fa-char == '024' {
      color: #f00;
    }
  }
}

// **********
// Utilities
// **********
@mixin clearfix {
  &::after {
    clear: both;
    content: '';
    display: table;
  }
}

@mixin strap-stretch {
  margin-left: $el-pad * -1;
  margin-right: $el-pad * -1;
  padding-left: $el-pad;
  padding-right: $el-pad;
}


// Responsive breakpoint generation
@mixin responsive($width) {
    // Only 1200px and larger
  @if $width == lg {
      @media only screen and (min-width: $screen-lg) {
          @content;
      }
  } @else if $width == md {
      @media only screen and (max-width: $screen-md-max) {
          @content;
      }
  } @else if $width == md-up {
      @media only screen and (min-width: $screen-md) {
          @content;
      }
  } @else if $width == md-only {
      @media only screen and (min-width: $screen-md) and (max-width: $screen-md-max) {
          @content;
      }
  } @else if $width == sm {
      @media only screen and (max-width: $screen-sm-max) {
          @content;
      }
  } @else if $width == sm-up {
      @media only screen and (min-width: $screen-sm) {
          @content;
      }
  } @else if $width == sm-only {
      @media only screen and (min-width: $screen-sm) and (max-width: $screen-sm-max) {
          @content;
      }
  } @else if $width == xs {
      @media only screen and (max-width: $screen-xs-max) {
          @content;
      }
  } @else if $width == xs-up {
      @media only screen and (min-width: $screen-xs) {
          @content;
      }
  } @else if $width == xs-only {
      @media only screen and (min-width: $screen-xs) and (max-width: $screen-xs-max) {
          @content;
      }
  } @else if $width == xxs {
      @media only screen and (max-width: $screen-xs - 1) {
          @content;
      }
  } @else if $width == sm-md {
      @media only screen and (min-width: $screen-sm) and (max-width: $screen-md-max) {
          @content;
      }
  } @else if $width == phablet {
      @media only screen and (min-width: $screen-xs) and (max-width: $screen-sm-max) {
          @content;
      }
  }
}


// Sliders
@mixin slideopen($maxh) {
  max-height: $maxh;
  transition: max-height .25s ease-in;
}

@mixin slideclose($maxh) {
  max-height: $maxh;
  overflow: hidden;
  transition: max-height .15s ease-out;
}


@mixin data-labeler($width, $el-parent: 'dl') {
  $label: 'dt';
  $dpoint: 'dd';

  @if $el-parent != 'dl' {
    $label: '.data-label';
    $dpoint: '.data-point';
  }

  #{$label} {
    flex: 0 0 $width;
  }

  #{$dpoint} {
    flex: 0 0 calc(100% - #{$width});
  }
}
